import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import Groq from "groq-sdk";
import { insertAnalysisSchema } from "@shared/schema";
import multer from "multer";
import { generatePDF } from "./pdf-generator";

const upload = multer({
  storage: multer.memoryStorage(),
  limits: { 
    fileSize: 2990000,
    files: 5
  },
  fileFilter: (_req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Apenas arquivos de imagem s√£o permitidos'));
    }
  },
});

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

async function analyzeImagesWithGroq(
  files: Express.Multer.File[],
  description: string,
  assetInfo: any = {}
): Promise<any> {
  if (!process.env.GROQ_API_KEY) {
    throw new Error("GROQ_API_KEY n√£o configurada");
  }

  console.log("üîç ETAPA 1: An√°lise visual com Llama 4 Scout Vision...");
  
  // ETAPA 1: Llama Vision analisa as imagens
  const visualAnalysis = await analyzeWithVision(files, description);
  
  console.log("üß† ETAPA 2: Racioc√≠nio profundo com Llama 3.3 70B...");
  
  // ETAPA 2: Llama 3.3 70B faz an√°lise sistem√°tica profunda
  const deepAnalysis = await analyzeWithReasoning(visualAnalysis, description, assetInfo);
  
  return deepAnalysis;
}

async function analyzeWithVision(
  files: Express.Multer.File[],
  description: string
): Promise<string> {
  const content: any[] = [
    {
      type: "text",
      text: `Voc√™ √© um especialista em identifica√ß√£o visual de componentes e danos. Analise detalhadamente as imagens fornecidas.

${description ? `Contexto adicional fornecido pelo usu√°rio: ${description}` : ""}

Sua tarefa:
1. Identifique o tipo de objeto/bem (ve√≠culo, im√≥vel, equipamento, etc.)
2. Liste TODOS os componentes vis√≠veis na imagem
3. Para cada componente vis√≠vel, descreva DETALHADAMENTE:
   - O componente em si COM O LADO ESPECIFICADO (ex: "Porta Dianteira Esquerda" e n√£o apenas "Porta")
   - Seu estado (perfeito, danificado, sujo, etc.)
   - Todos os danos vis√≠veis (arranh√µes, amassados, rachaduras, desgastes, manchas, etc.)
   - Localiza√ß√£o MUITO PRECISA de cada dano usando termos direcionais claros
   - Tamanho aproximado dos danos

Exemplo para VE√çCULOS - componentes poss√≠veis COM LADOS:
- Externos: Para-choque Dianteiro, Para-choque Traseiro, Porta Dianteira Esquerda, Porta Dianteira Direita, Porta Traseira Esquerda, Porta Traseira Direita, Cap√¥, Tampa do Porta-malas, Para-lama Dianteiro Esquerdo, Para-lama Dianteiro Direito, Para-lama Traseiro Esquerdo, Para-lama Traseiro Direito, Para-brisa, Vidro Lateral Dianteiro Esquerdo, Vidro Lateral Dianteiro Direito, Retrovisor Externo Esquerdo, Retrovisor Externo Direito, Farol Dianteiro Esquerdo, Farol Dianteiro Direito, Lanterna Traseira Esquerda, Lanterna Traseira Direita, Roda Dianteira Esquerda, Roda Dianteira Direita, Roda Traseira Esquerda, Roda Traseira Direita
- Internos: Banco Dianteiro Esquerdo (motorista), Banco Dianteiro Direito, Banco Traseiro (especificar lado se relevante)

IMPORTANTE - ESPECIFICA√á√ÉO DE LOCALIZA√á√ÉO:
- Seja EXTREMAMENTE detalhado
- SEMPRE especifique o LADO: esquerdo, direito, dianteiro, traseiro, central
- Para cada dano, especifique tamb√©m a POSI√á√ÉO no componente: superior, inferior, lateral, central
- Use refer√™ncias claras: "no canto superior esquerdo", "na parte inferior central", "na lateral direita pr√≥ximo √† ma√ßaneta"
- N√£o omita NENHUM componente vis√≠vel
- N√£o omita NENHUM dano, por menor que seja
- Evite ambiguidades - seja espec√≠fico sobre ONDE exatamente est√° o dano

Formato de resposta (texto livre, muito detalhado):`,
    },
  ];

  for (const file of files) {
    const base64Image = file.buffer.toString("base64");
    const mimeType = file.mimetype || "image/jpeg";
    const dataUrl = `data:${mimeType};base64,${base64Image}`;
    
    const dataUrlSize = Buffer.byteLength(dataUrl, 'utf8');
    if (dataUrlSize > 4000000) {
      const error: any = new Error("Imagem muito grande ap√≥s codifica√ß√£o. Cada imagem deve ter menos de 3MB.");
      error.status = 400;
      throw error;
    }
    
    content.push({
      type: "image_url",
      image_url: {
        url: dataUrl,
      },
    });
  }

  try {
    const completion = await groq.chat.completions.create({
      model: "meta-llama/llama-4-scout-17b-16e-instruct",
      messages: [
        {
          role: "user",
          content: content,
        },
      ],
      temperature: 0.3,
      max_tokens: 2048,
    });

    const visualDescription = completion.choices[0]?.message?.content || "";
    
    if (!visualDescription) {
      throw new Error("An√°lise visual n√£o retornou descri√ß√£o");
    }

    console.log("‚úÖ An√°lise visual conclu√≠da");
    return visualDescription;
  } catch (error) {
    console.error("Erro na an√°lise visual:", error);
    throw error;
  }
}

async function analyzeWithReasoning(
  visualDescription: string,
  userDescription: string,
  assetInfo: any = {}
): Promise<any> {
  const assetContext = [];
  if (assetInfo.assetType) {
    const typeMap: any = {
      vehicle: "Ve√≠culo",
      furniture: "M√≥vel",
      real_estate: "Im√≥vel",
      other: "Outro"
    };
    assetContext.push(`Tipo: ${typeMap[assetInfo.assetType] || assetInfo.assetType}`);
  }
  if (assetInfo.brand) assetContext.push(`Marca: ${assetInfo.brand}`);
  if (assetInfo.model) assetContext.push(`Modelo: ${assetInfo.model}`);
  if (assetInfo.year) assetContext.push(`Ano: ${assetInfo.year}`);
  if (assetInfo.quality) {
    const qualityMap: any = {
      premium: "Premium/Luxo",
      medium: "M√©dio",
      economy: "Econ√¥mico"
    };
    assetContext.push(`Categoria: ${qualityMap[assetInfo.quality] || assetInfo.quality}`);
  }
  
  const prompt = `Voc√™ √© um especialista em an√°lise sistem√°tica de danos com racioc√≠nio avan√ßado. 

INFORMA√á√ïES DO BEM SEGURADO:
${assetContext.length > 0 ? assetContext.join(" | ") : "N√£o fornecido"}
‚ö†Ô∏è IMPORTANTE: Use essas informa√ß√µes para ajustar os pre√ßos conforme os fatores de ajuste especificados!

CONTEXTO DO USU√ÅRIO:
${userDescription ? userDescription : "N√£o fornecido"}

DESCRI√á√ÉO VISUAL DETALHADA (fornecida por an√°lise de imagem):
${visualDescription}

Sua tarefa √© fazer uma an√°lise SISTEM√ÅTICA E EXAUSTIVA seguindo esta metodologia OBRIGAT√ìRIA:

ETAPA 1 - IDENTIFICA√á√ÉO DO OBJETO:
Identifique o tipo de objeto/bem descrito na an√°lise visual.

ETAPA 2 - IDENTIFICA√á√ÉO DOS COMPONENTES VIS√çVEIS:
Liste APENAS os componentes que foram MENCIONADOS e DESCRITOS na an√°lise visual.
N√ÉO liste componentes que n√£o aparecem ou n√£o foram mencionados na descri√ß√£o visual.

ETAPA 3 - AN√ÅLISE SISTEM√ÅTICA DOS DANOS VIS√çVEIS:
Para CADA componente mencionado na descri√ß√£o visual:
a) Verifique se h√° algum dano descrito para esse componente
b) Se houver dano, crie uma entrada SEPARADA para cada dano espec√≠fico
c) Liste APENAS os danos que foram CLARAMENTE IDENTIFICADOS na descri√ß√£o visual

TABELA DE PRE√áOS DE REFER√äNCIA - ANGOLA (Kwanzas - KZ):

VE√çCULOS:
- Para-choque: Novo 150.000-300.000 KZ | Usado 50.000-150.000 KZ | Reparo 30.000-100.000 KZ
- Porta: Novo 400.000-800.000 KZ | Usado 200.000-400.000 KZ | Reparo 50.000-200.000 KZ
- Cap√¥: Novo 300.000-600.000 KZ | Usado 150.000-300.000 KZ | Reparo 80.000-250.000 KZ
- Para-lama: Novo 200.000-400.000 KZ | Usado 100.000-200.000 KZ | Reparo 40.000-150.000 KZ
- Farol: Novo 150.000-400.000 KZ | Usado 80.000-200.000 KZ | Reparo/Troca 50.000-150.000 KZ
- Retrovisor: Novo 80.000-200.000 KZ | Usado 40.000-100.000 KZ | Reparo 20.000-80.000 KZ
- Vidro lateral: Novo 100.000-250.000 KZ | Usado 50.000-150.000 KZ | Troca 60.000-200.000 KZ
- Para-brisa: Novo 150.000-400.000 KZ | Usado 80.000-200.000 KZ | Troca 100.000-300.000 KZ
- Lanterna: Novo 80.000-200.000 KZ | Usado 40.000-100.000 KZ | Troca 50.000-150.000 KZ
- Banco: Novo 200.000-500.000 KZ | Usado 100.000-250.000 KZ | Reparo 30.000-120.000 KZ
- Volante: Novo 100.000-300.000 KZ | Usado 50.000-150.000 KZ | Troca 80.000-200.000 KZ
- Painel: Novo 300.000-800.000 KZ | Usado 150.000-400.000 KZ | Reparo 100.000-300.000 KZ

M√ìVEIS:
- Sof√°: Novo 250.000-400.000 KZ | Usado 100.000-260.000 KZ
- Cama: Novo 90.000-250.000 KZ | Usado 50.000-150.000 KZ
- Mesa jantar: Novo 95.000-630.000 KZ | Usado 50.000-300.000 KZ
- Cadeira: Novo 80.000-150.000 KZ | Usado 30.000-80.000 KZ
- Guarda-roupa: Novo 520.000-800.000 KZ | Usado 250.000-520.000 KZ
- Estante: Novo 200.000-500.000 KZ | Usado 90.000-300.000 KZ
- Mesa centro: Novo 25.000-95.000 KZ | Usado 15.000-50.000 KZ
- C√¥moda: Novo 185.000-400.000 KZ | Usado 80.000-200.000 KZ

FORMATO DE SA√çDA JSON OBRIGAT√ìRIO (TODOS OS CAMPOS S√ÉO OBRIGAT√ìRIOS):

{
  "summary": "Tipo de bem + resumo dos danos identificados visualmente nas imagens analisadas",
  "damageItems": [
    {
      "itemName": "Nome ESPEC√çFICO do componente com LADO completo (ex: Para-choque Dianteiro, Porta Traseira Esquerda, Farol Dianteiro Direito, Retrovisor Externo Esquerdo, Para-lama Dianteiro Direito)",
      "itemType": "Categoria (ex: Elemento Externo - Carroceria, Ilumina√ß√£o, Vidros)",
      "severity": "low|moderate|high",
      "description": "Descri√ß√£o MUITO detalhada do dano VIS√çVEL com LOCALIZA√á√ÉO PRECISA E SEM AMBIGUIDADE: 
      - Tipo de dano (arranh√£o/amassado/rachadura/etc)
      - Localiza√ß√£o EXATA usando termos direcionais (ex: 'no canto superior direito', 'na parte central inferior', 'na lateral esquerda pr√≥ximo √† borda superior')
      - Dimens√µes aproximadas (ex: '5cm de comprimento', '√°rea de 10x8cm')
      - Caracter√≠sticas visuais espec√≠ficas",
      "estimatedImpact": "Impacto funcional, recomenda√ß√µes de reparo e urg√™ncia",
      "priceNew": "OBRIGAT√ìRIO - Pre√ßo do componente NOVO em Kwanzas (ex: '300.000 KZ' ou '200.000-400.000 KZ')",
      "priceUsed": "OBRIGAT√ìRIO - Pre√ßo do componente USADO/Segunda m√£o em Kwanzas (ex: '150.000 KZ' ou '100.000-200.000 KZ')",
      "repairCost": "OBRIGAT√ìRIO - Custo estimado de REPARO em Kwanzas (ex: '80.000 KZ' ou '50.000-120.000 KZ')"
    }
  ]
}

EXEMPLO COMPLETO DE UM ITEM:
{
  "itemName": "Para-choque Dianteiro",
  "itemType": "Elemento Externo - Carroceria",
  "severity": "high",
  "description": "Amassado profundo na parte lateral esquerda, com aproximadamente 15 cm de comprimento e 5 cm de profundidade. Pequenos rasgos na parte inferior central, com cerca de 3 cm de comprimento",
  "estimatedImpact": "Impacto estrutural, recomenda√ß√£o de reparo ou substitui√ß√£o, urg√™ncia alta",
  "priceNew": "150.000-300.000 KZ",
  "priceUsed": "50.000-150.000 KZ",
  "repairCost": "80.000-100.000 KZ"
}

REGRAS ABSOLUTAS:
- Liste APENAS os danos que foram EXPLICITAMENTE MENCIONADOS na descri√ß√£o visual
- N√ÉO invente ou presuma danos que n√£o foram descritos
- N√ÉO liste componentes sem danos vis√≠veis
- Para CADA dano mencionado na descri√ß√£o visual, crie uma entrada SEPARADA
- Cada arranh√£o, rachadura, amassado, desgaste, mancha, quebra MENCIONADO = entrada separada
- Inclua todos os danos descritos, mesmo os pequenos e superficiais
- Severity: "low" (superficial/est√©tico), "moderate" (fun√ß√£o parcial), "high" (estrutural/grave)
- Seja EXTREMAMENTE detalhado nas descri√ß√µes dos danos VIS√çVEIS
- Use portugu√™s brasileiro formal

ESPECIFICA√á√ÉO DE LOCALIZA√á√ÉO (OBRIGAT√ìRIO):
- SEMPRE especifique o LADO completo do componente no itemName (ex: "Porta Dianteira Esquerda", "Para-lama Traseiro Direito", "Farol Dianteiro Esquerdo")
- NUNCA use apenas "Porta" ou "Para-lama" - sempre inclua dianteiro/traseiro E esquerdo/direito
- Na descri√ß√£o, especifique a posi√ß√£o EXATA do dano usando termos direcionais m√∫ltiplos:
  * Exemplos CORRETOS: "na parte superior esquerda", "no canto inferior direito", "na regi√£o central inferior", "na lateral direita pr√≥ximo √† parte superior"
  * Exemplos INCORRETOS: "na lateral" (falta especificar qual lateral e onde), "em cima" (vago)
- Use pontos de refer√™ncia quando poss√≠vel (ex: "pr√≥ximo √† ma√ßaneta", "abaixo do retrovisor", "ao lado do farol")
- Evite termos vagos ou amb√≠guos - seja sempre espec√≠fico e claro

ESTIMATIVA DE PRE√áOS (OBRIGAT√ìRIO):
- Use a TABELA DE PRE√áOS DE REFER√äNCIA como BASE, mas AJUSTE os valores conforme as caracter√≠sticas do bem:
  
  FATORES DE AJUSTE DE PRE√áO:
  * Marca/Modelo Premium (Mercedes, BMW, Lexus, Toyota high-end): +30-50% sobre pre√ßos base
  * Marca/Modelo M√©dio (Toyota padr√£o, Honda, Nissan): usar pre√ßos base da tabela
  * Marca/Modelo Econ√¥mico (marcas populares): -20-30% sobre pre√ßos base
  * M√≥veis de luxo/designer: +40-60% sobre pre√ßos base
  * M√≥veis de qualidade m√©dia: usar pre√ßos base da tabela
  * M√≥veis econ√¥micos: -25-35% sobre pre√ßos base
  * Ano do ve√≠culo/m√≥vel (novo 0-3 anos): usar limite superior da tabela
  * Ano m√©dio (4-7 anos): usar valores m√©dios da tabela
  * Ano antigo (8+ anos): usar limite inferior da tabela
  * Componentes importados vs. locais: importados +20-40%
  
  C√ÅLCULO DE CUSTOS:
  - Para priceNew: consulte a tabela e ajuste conforme fatores acima
  - Para priceUsed: 40-60% do priceNew para componentes em boas condi√ß√µes
  - Para repairCost: 
    * Se severity="low": 20-40% do valor de reparo base da tabela
    * Se severity="moderate": 50-80% do valor de reparo base da tabela
    * Se severity="high": 80-100% do valor de reparo base, ou pr√≥ximo ao valor de substitui√ß√£o usado
  
- Analise o contexto da imagem para determinar: marca, modelo, ano aproximado, categoria de qualidade
- Se n√£o houver informa√ß√µes claras, use valores m√©dios da tabela
- SEMPRE forne√ßa os tr√™s campos de pre√ßo (priceNew, priceUsed, repairCost) para cada dano
- Use formato claro e espec√≠fico: "300.000 KZ" ou "200.000-400.000 KZ"
- Seja conservador nas estimativas - √© melhor subestimar que superestimar

IMPORTANTE CR√çTICO:
- A lista deve conter APENAS danos que foram VISUALMENTE IDENTIFICADOS nas imagens
- Se a descri√ß√£o visual menciona "v√°rios arranh√µes", liste cada um separadamente
- N√ÉO adicione danos que n√£o foram mencionados na descri√ß√£o visual
- Seja fiel √† descri√ß√£o visual - liste tudo que foi descrito, mas NADA al√©m disso

Retorne APENAS o objeto JSON v√°lido, sem markdown ou texto adicional.`;

  try {
    const completion = await groq.chat.completions.create({
      model: "llama-3.3-70b-versatile",
      messages: [
        {
          role: "user",
          content: prompt,
        },
      ],
      temperature: 0.6,
      max_tokens: 8192,
      response_format: { type: "json_object" },
    });

    const responseText = completion.choices[0]?.message?.content || "{}";
    const parsedResponse = JSON.parse(responseText);

    if (!parsedResponse.damageItems || !Array.isArray(parsedResponse.damageItems)) {
      throw new Error("Resposta do modelo em formato inv√°lido");
    }

    // Debug: verificar se os pre√ßos est√£o sendo retornados
    const firstItem = parsedResponse.damageItems[0];
    if (firstItem) {
      console.log('üîç DEBUG - Primeiro item:', JSON.stringify(firstItem, null, 2));
    }

    console.log(`‚úÖ An√°lise profunda conclu√≠da: ${parsedResponse.damageItems.length} danos identificados`);
    return parsedResponse;
  } catch (error) {
    console.error("Erro na an√°lise profunda:", error);
    if (error instanceof Error) {
      throw new Error(`Falha na an√°lise profunda: ${error.message}`);
    }
    throw new Error("Falha na an√°lise profunda");
  }
}

export async function registerRoutes(app: Express): Promise<Server> {
  app.post(
    "/api/analyze",
    (req, res, next) => {
      upload.array("images", 5)(req, res, (err) => {
        if (err instanceof multer.MulterError) {
          if (err.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({ 
              error: "Arquivo muito grande",
              details: "Cada imagem deve ter no m√°ximo 3MB"
            });
          }
          if (err.code === 'LIMIT_FILE_COUNT') {
            return res.status(400).json({ 
              error: "Muitas imagens",
              details: "Envie no m√°ximo 5 imagens por an√°lise"
            });
          }
          return res.status(400).json({ 
            error: "Erro no upload",
            details: err.message
          });
        }
        if (err) {
          return res.status(400).json({ 
            error: "Arquivo inv√°lido",
            details: err.message
          });
        }
        next();
      });
    },
    async (req, res) => {
      try {
        const files = req.files as Express.Multer.File[];
        const { description = "", assetInfo = "{}" } = req.body;
        
        let parsedAssetInfo;
        try {
          parsedAssetInfo = JSON.parse(assetInfo);
        } catch {
          parsedAssetInfo = {};
        }

        if (!files || files.length === 0) {
          return res.status(400).json({ error: "Nenhuma imagem fornecida" });
        }

        if (!process.env.GROQ_API_KEY) {
          return res.status(500).json({ 
            error: "Configura√ß√£o ausente",
            details: "GROQ_API_KEY n√£o est√° configurada no servidor"
          });
        }

        const groqResponse = await analyzeImagesWithGroq(files, description, parsedAssetInfo);

        const damageItems = groqResponse.damageItems || [];
        
        if (damageItems.length === 0) {
          return res.status(400).json({
            error: "Nenhum dano identificado",
            details: "A an√°lise n√£o identificou danos nas imagens fornecidas. Tente com imagens mais claras ou forne√ßa mais contexto."
          });
        }

        const severityCounts = {
          low: damageItems.filter((item: any) => item.severity === "low").length,
          moderate: damageItems.filter((item: any) => item.severity === "moderate").length,
          high: damageItems.filter((item: any) => item.severity === "high").length,
        };

        let overallSeverity: "low" | "moderate" | "high" = "low";
        if (severityCounts.high > 0) {
          overallSeverity = "high";
        } else if (severityCounts.moderate > 0) {
          overallSeverity = "moderate";
        }

        const analysisData = {
          summary: groqResponse.summary || "An√°lise conclu√≠da com sucesso",
          totalItems: damageItems.length,
          severityCounts,
          damageItems,
          overallSeverity,
          description,
        };

        const validated = insertAnalysisSchema.parse(analysisData);
        const analysis = await storage.createAnalysis(validated);

        res.json(analysis);
      } catch (error: any) {
        console.error("Erro na an√°lise:", error);
        const statusCode = error.status || 500;
        res.status(statusCode).json({
          error: "Erro ao processar an√°lise",
          details: error instanceof Error ? error.message : "Erro desconhecido",
        });
      }
    }
  );

  app.get("/api/analyses", async (_req, res) => {
    try {
      const analyses = await storage.getAllAnalyses();
      res.json(analyses);
    } catch (error) {
      console.error("Erro ao buscar an√°lises:", error);
      res.status(500).json({ error: "Erro ao buscar an√°lises" });
    }
  });

  app.delete("/api/analyses/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const deleted = await storage.deleteAnalysis(id);
      
      if (!deleted) {
        return res.status(404).json({ error: "An√°lise n√£o encontrada" });
      }
      
      res.json({ success: true });
    } catch (error) {
      console.error("Erro ao deletar an√°lise:", error);
      res.status(500).json({ error: "Erro ao deletar an√°lise" });
    }
  });

  app.get("/api/analyses/:id/pdf", async (req, res) => {
    try {
      const { id } = req.params;
      const analyses = await storage.getAllAnalyses();
      const analysis = analyses.find(a => a.id === id);
      
      if (!analysis) {
        return res.status(404).json({ error: "An√°lise n√£o encontrada" });
      }

      const doc = generatePDF(analysis);
      
      const filename = `relatorio-analise-${id}-${Date.now()}.pdf`;
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
      
      doc.on('error', (err) => {
        console.error('Erro ao gerar PDF:', err);
        if (!res.headersSent) {
          res.status(500).json({ error: 'Erro ao gerar PDF' });
        }
      });

      doc.pipe(res);
      doc.end();
    } catch (error) {
      console.error("Erro ao gerar PDF:", error);
      if (!res.headersSent) {
        res.status(500).json({ error: "Erro ao gerar PDF" });
      }
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
