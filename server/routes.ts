import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import Groq from "groq-sdk";
import { insertAnalysisSchema } from "@shared/schema";
import multer from "multer";

const upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 10 * 1024 * 1024 },
});

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

async function analyzeImagesWithGroq(
  files: Express.Multer.File[],
  description: string
): Promise<any> {
  if (!process.env.GROQ_API_KEY) {
    throw new Error("GROQ_API_KEY n√£o configurada");
  }

  console.log("üîç ETAPA 1: An√°lise visual com Llama 3.2 90B Vision...");
  
  // ETAPA 1: Llama Vision analisa as imagens
  const visualAnalysis = await analyzeWithVision(files, description);
  
  console.log("üß† ETAPA 2: Racioc√≠nio profundo com DeepSeek R1...");
  
  // ETAPA 2: DeepSeek R1 faz an√°lise sistem√°tica profunda
  const deepAnalysis = await analyzeWithDeepSeek(visualAnalysis, description);
  
  return deepAnalysis;
}

async function analyzeWithVision(
  files: Express.Multer.File[],
  description: string
): Promise<string> {
  const content: any[] = [
    {
      type: "text",
      text: `Voc√™ √© um especialista em identifica√ß√£o visual de componentes e danos. Analise detalhadamente as imagens fornecidas.

${description ? `Contexto adicional fornecido pelo usu√°rio: ${description}` : ""}

Sua tarefa:
1. Identifique o tipo de objeto/bem (ve√≠culo, im√≥vel, equipamento, etc.)
2. Liste TODOS os componentes vis√≠veis na imagem
3. Para cada componente vis√≠vel, descreva DETALHADAMENTE:
   - O componente em si
   - Seu estado (perfeito, danificado, sujo, etc.)
   - Todos os danos vis√≠veis (arranh√µes, amassados, rachaduras, desgastes, manchas, etc.)
   - Localiza√ß√£o precisa de cada dano
   - Tamanho aproximado dos danos

Exemplo para VE√çCULOS - componentes poss√≠veis:
- Externos: Carroceria, Para-choques, Portas, Ma√ßanetas, Cap√¥, Porta-malas, Para-lamas, Para-brisa, Vidros, Retrovisores, Far√≥is, Lanternas, Rodas, Pneus, Grades, Emblemas
- Internos: Bancos, Volante, Painel, Console, Tapetes, Revestimentos

IMPORTANTE:
- Seja EXTREMAMENTE detalhado
- N√£o omita NENHUM componente vis√≠vel
- N√£o omita NENHUM dano, por menor que seja
- Descreva a localiza√ß√£o precisa de cada dano

Formato de resposta (texto livre, muito detalhado):`,
    },
  ];

  for (const file of files) {
    const base64Image = file.buffer.toString("base64");
    const mimeType = file.mimetype || "image/jpeg";
    
    content.push({
      type: "image_url",
      image_url: {
        url: `data:${mimeType};base64,${base64Image}`,
      },
    });
  }

  try {
    const completion = await groq.chat.completions.create({
      model: "llama-3.2-90b-vision-preview",
      messages: [
        {
          role: "user",
          content: content,
        },
      ],
      temperature: 0.3,
      max_tokens: 8192,
    });

    const visualDescription = completion.choices[0]?.message?.content || "";
    
    if (!visualDescription) {
      throw new Error("An√°lise visual n√£o retornou descri√ß√£o");
    }

    console.log("‚úÖ An√°lise visual conclu√≠da:", visualDescription.substring(0, 200) + "...");
    return visualDescription;
  } catch (error) {
    console.error("Erro na an√°lise visual:", error);
    if (error instanceof Error) {
      throw new Error(`Falha na an√°lise visual: ${error.message}`);
    }
    throw new Error("Falha na an√°lise visual");
  }
}

async function analyzeWithDeepSeek(
  visualDescription: string,
  userDescription: string
): Promise<any> {
  const prompt = `Voc√™ √© um especialista em an√°lise sistem√°tica de danos com racioc√≠nio avan√ßado. 

CONTEXTO DO USU√ÅRIO:
${userDescription ? userDescription : "N√£o fornecido"}

DESCRI√á√ÉO VISUAL DETALHADA (fornecida por an√°lise de imagem):
${visualDescription}

Sua tarefa √© fazer uma an√°lise SISTEM√ÅTICA E EXAUSTIVA seguindo esta metodologia OBRIGAT√ìRIA:

ETAPA 1 - IDENTIFICA√á√ÉO DO OBJETO:
Identifique o tipo de objeto/bem descrito na an√°lise visual.

ETAPA 2 - MAPEAMENTO COMPLETO DE COMPONENTES:
Liste TODOS os componentes que este tipo de objeto possui (mesmo que n√£o estejam vis√≠veis na descri√ß√£o).

Para VE√çCULOS, considere:
- Elementos Externos: Carroceria, Para-choques (dianteiro/traseiro), Portas (todas), Ma√ßanetas, Cap√¥, Tampa do porta-malas, Para-lamas (todos), Para-brisa, Vidros laterais, Vidros traseiros, Retrovisores (externo direito/esquerdo/interno), Far√≥is (direito/esquerdo), Lanternas traseiras, Luzes de freio, Setas, Rodas (todas 4), Pneus, Grades, Emblemas, Antena, Teto, Teto solar, Aerof√≥lio, Spoiler, Saias laterais
- Elementos Internos: Bancos (dianteiros/traseiros), Volante, Painel de instrumentos, Console central, Porta-luvas, Cintos de seguran√ßa, Tapetes, Revestimentos de porta, Teto interno, Ar-condicionado

ETAPA 3 - AN√ÅLISE SISTEM√ÅTICA DE CADA COMPONENTE:
Para CADA componente listado acima:
a) Verifique se foi mencionado na descri√ß√£o visual
b) Se mencionado, verifique se h√° algum dano descrito
c) Se houver dano, crie uma entrada SEPARADA para cada dano espec√≠fico

FORMATO DE SA√çDA JSON OBRIGAT√ìRIO:

{
  "summary": "Tipo de bem + resumo completo da an√°lise incluindo quantos componentes foram examinados e extens√£o dos danos",
  "damageItems": [
    {
      "itemName": "Nome ESPEC√çFICO do componente (ex: Para-choque Dianteiro, Porta Traseira Esquerda, Farol Direito)",
      "itemType": "Categoria (ex: Elemento Externo - Carroceria, Ilumina√ß√£o, Vidros)",
      "severity": "low|moderate|high",
      "description": "Descri√ß√£o MUITO detalhada do dano: tipo (arranh√£o/amassado/rachadura/etc), localiza√ß√£o PRECISA no componente, dimens√µes, caracter√≠sticas visuais",
      "estimatedImpact": "Impacto funcional, recomenda√ß√µes de reparo e urg√™ncia"
    }
  ]
}

REGRAS ABSOLUTAS:
- Examine SISTEMATICAMENTE cada componente mencionado na descri√ß√£o visual
- N√ÉO pule nenhum componente - verifique TODOS
- Para CADA dano encontrado, crie uma entrada SEPARADA
- Liste ABSOLUTAMENTE TODOS os danos descritos SEM LIMITE
- Cada arranh√£o, rachadura, amassado, desgaste, mancha, quebra = entrada separada
- Inclua at√© danos pequenos e superficiais
- Severity: "low" (superficial/est√©tico), "moderate" (fun√ß√£o parcial), "high" (estrutural/grave)
- Seja EXTREMAMENTE detalhado nas descri√ß√µes
- Use portugu√™s brasileiro formal
- Especifique localiza√ß√£o PRECISA de cada dano

IMPORTANTE CR√çTICO:
- A lista deve ser COMPLETA e EXAUSTIVA
- N√£o omita NADA mencionado na descri√ß√£o visual
- Se a descri√ß√£o menciona "v√°rios arranh√µes", liste cada um separadamente
- Verifique CADA componente da lista de mapeamento

Retorne APENAS o objeto JSON v√°lido, sem markdown ou texto adicional.`;

  try {
    const completion = await groq.chat.completions.create({
      model: "deepseek-r1-distill-llama-70b",
      messages: [
        {
          role: "user",
          content: prompt,
        },
      ],
      temperature: 0.6,
      max_tokens: 25000,
      response_format: { type: "json_object" },
    });

    const responseText = completion.choices[0]?.message?.content || "{}";
    const parsedResponse = JSON.parse(responseText);

    if (!parsedResponse.damageItems || !Array.isArray(parsedResponse.damageItems)) {
      throw new Error("Resposta do DeepSeek em formato inv√°lido");
    }

    console.log(`‚úÖ An√°lise profunda conclu√≠da: ${parsedResponse.damageItems.length} danos identificados`);
    return parsedResponse;
  } catch (error) {
    console.error("Erro na an√°lise profunda:", error);
    if (error instanceof Error) {
      throw new Error(`Falha na an√°lise profunda: ${error.message}`);
    }
    throw new Error("Falha na an√°lise profunda");
  }
}

export async function registerRoutes(app: Express): Promise<Server> {
  app.post(
    "/api/analyze",
    upload.array("images", 10),
    async (req, res) => {
      try {
        const files = req.files as Express.Multer.File[];
        const { description = "" } = req.body;

        if (!files || files.length === 0) {
          return res.status(400).json({ error: "Nenhuma imagem fornecida" });
        }

        if (!process.env.GROQ_API_KEY) {
          return res.status(500).json({ 
            error: "Configura√ß√£o ausente",
            details: "GROQ_API_KEY n√£o est√° configurada no servidor"
          });
        }

        const groqResponse = await analyzeImagesWithGroq(files, description);

        const damageItems = groqResponse.damageItems || [];
        
        if (damageItems.length === 0) {
          return res.status(400).json({
            error: "Nenhum dano identificado",
            details: "A an√°lise n√£o identificou danos nas imagens fornecidas. Tente com imagens mais claras ou forne√ßa mais contexto."
          });
        }

        const severityCounts = {
          low: damageItems.filter((item: any) => item.severity === "low").length,
          moderate: damageItems.filter((item: any) => item.severity === "moderate").length,
          high: damageItems.filter((item: any) => item.severity === "high").length,
        };

        let overallSeverity: "low" | "moderate" | "high" = "low";
        if (severityCounts.high > 0) {
          overallSeverity = "high";
        } else if (severityCounts.moderate > 0) {
          overallSeverity = "moderate";
        }

        const analysisData = {
          summary: groqResponse.summary || "An√°lise conclu√≠da com sucesso",
          totalItems: damageItems.length,
          severityCounts,
          damageItems,
          overallSeverity,
          description,
        };

        const validated = insertAnalysisSchema.parse(analysisData);
        const analysis = await storage.createAnalysis(validated);

        res.json(analysis);
      } catch (error) {
        console.error("Erro na an√°lise:", error);
        res.status(500).json({
          error: "Erro ao processar an√°lise",
          details: error instanceof Error ? error.message : "Erro desconhecido",
        });
      }
    }
  );

  app.get("/api/analyses", async (_req, res) => {
    try {
      const analyses = await storage.getAllAnalyses();
      res.json(analyses);
    } catch (error) {
      console.error("Erro ao buscar an√°lises:", error);
      res.status(500).json({ error: "Erro ao buscar an√°lises" });
    }
  });

  app.delete("/api/analyses/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const deleted = await storage.deleteAnalysis(id);
      
      if (!deleted) {
        return res.status(404).json({ error: "An√°lise n√£o encontrada" });
      }
      
      res.json({ success: true });
    } catch (error) {
      console.error("Erro ao deletar an√°lise:", error);
      res.status(500).json({ error: "Erro ao deletar an√°lise" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
